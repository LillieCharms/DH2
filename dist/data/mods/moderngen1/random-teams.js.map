{
  "version": 3,
  "sources": ["../../../../data/mods/moderngen1/random-teams.ts"],
  "sourcesContent": ["\"use strict\";\r\nvar __create = Object.create;\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __export = (target, all) => {\r\n  for (var name in all)\r\n    __defProp(target, name, { get: all[name], enumerable: true });\r\n};\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\r\n  // If the importer is in node compatibility mode or this is not an ESM\r\n  // file that has been converted to a CommonJS file using a Babel-\r\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\r\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\r\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\r\n  mod\r\n));\r\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\r\nvar random_teams_exports = {};\r\n__export(random_teams_exports, {\r\n  RandomGen1Teams: () => RandomGen1Teams,\r\n  default: () => random_teams_default\r\n});\r\nmodule.exports = __toCommonJS(random_teams_exports);\r\nvar import_random_teams = __toESM(require(\"../gen2/random-teams\"));\r\nvar import_lib = require(\"../../../lib\");\r\nclass RandomGen1Teams extends import_random_teams.default {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.randomData = require(\"./random-data.json\");\r\n  }\r\n  // Challenge Cup or CC teams are basically fully random teams.\r\n  randomCCTeam() {\r\n    this.enforceNoDirectCustomBanlistChanges();\r\n    const team = [];\r\n    const randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype);\r\n    for (const pokemon of randomN) {\r\n      const species = this.dex.species.get(pokemon);\r\n      const mbstmin = 1307;\r\n      const stats = species.baseStats;\r\n      let mbst = stats[\"hp\"] * 2 + 30 + 63 + 100 + 10;\r\n      mbst += stats[\"atk\"] * 2 + 30 + 63 + 100 + 5;\r\n      mbst += stats[\"def\"] * 2 + 30 + 63 + 100 + 5;\r\n      mbst += stats[\"spa\"] * 2 + 30 + 63 + 100 + 5;\r\n      mbst += stats[\"spd\"] * 2 + 30 + 63 + 100 + 5;\r\n      mbst += stats[\"spe\"] * 2 + 30 + 63 + 100 + 5;\r\n      let level;\r\n      if (this.adjustLevel) {\r\n        level = this.adjustLevel;\r\n      } else {\r\n        level = Math.floor(100 * mbstmin / mbst);\r\n        while (level < 100) {\r\n          mbst = Math.floor((stats[\"hp\"] * 2 + 30 + 63 + 100) * level / 100 + 10);\r\n          mbst += Math.floor(((stats[\"atk\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\r\n          mbst += Math.floor((stats[\"def\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n          mbst += Math.floor(((stats[\"spa\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\r\n          mbst += Math.floor((stats[\"spd\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n          mbst += Math.floor((stats[\"spe\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\r\n          if (mbst >= mbstmin)\r\n            break;\r\n          level++;\r\n        }\r\n      }\r\n      const ivs = {\r\n        hp: 0,\r\n        atk: this.random(16),\r\n        def: this.random(16),\r\n        spa: this.random(16),\r\n        spd: 0,\r\n        spe: this.random(16)\r\n      };\r\n      ivs[\"hp\"] = ivs[\"atk\"] % 2 * 16 + ivs[\"def\"] % 2 * 8 + ivs[\"spe\"] % 2 * 4 + ivs[\"spa\"] % 2 * 2;\r\n      ivs[\"atk\"] *= 2;\r\n      ivs[\"def\"] *= 2;\r\n      ivs[\"spa\"] *= 2;\r\n      ivs[\"spd\"] = ivs[\"spa\"];\r\n      ivs[\"spe\"] *= 2;\r\n      const evs = { hp: 255, atk: 255, def: 255, spa: 255, spd: 255, spe: 255 };\r\n      const pool = [...this.dex.species.getMovePool(species.id)];\r\n      team.push({\r\n        name: species.baseSpecies,\r\n        species: species.name,\r\n        moves: this.multipleSamplesNoReplace(pool, 4),\r\n        gender: false,\r\n        ability: \"No Ability\",\r\n        evs,\r\n        ivs,\r\n        item: \"\",\r\n        level,\r\n        happiness: 0,\r\n        shiny: false,\r\n        nature: \"Serious\"\r\n      });\r\n    }\r\n    return team;\r\n  }\r\n  // Random team generation for Gen 1 Random Battles.\r\n  randomTeam() {\r\n    this.enforceNoDirectCustomBanlistChanges();\r\n    const seed = this.prng.seed;\r\n    const ruleTable = this.dex.formats.getRuleTable(this.format);\r\n    const pokemon = [];\r\n    const isMonotype = !!this.forceMonotype || ruleTable.has(\"sametypeclause\");\r\n    const typePool = this.dex.types.names();\r\n    const type = this.forceMonotype || this.sample(typePool);\r\n    const rejectedButNotInvalidPool = [];\r\n    const typeCount = {};\r\n    const weaknessCount = { Electric: 0, Psychic: 0, Water: 0, Ice: 0, Ground: 0, Fire: 0 };\r\n    let numMaxLevelPokemon = 0;\r\n    const pokemonPool = this.getPokemonPool(type, pokemon, isMonotype, Object.keys(this.randomData))[0];\r\n    while (pokemonPool.length && pokemon.length < this.maxTeamSize) {\r\n      const species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n      if (!species.exists)\r\n        continue;\r\n      if (species.id === \"ditto\" && this.battleHasDitto)\r\n        continue;\r\n      const limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n      let skip = false;\r\n      if (!isMonotype && !this.forceMonotype) {\r\n        for (const typeName of species.types) {\r\n          if (typeCount[typeName] >= 2 * limitFactor) {\r\n            skip = true;\r\n            break;\r\n          }\r\n        }\r\n        if (skip) {\r\n          rejectedButNotInvalidPool.push(species.id);\r\n          continue;\r\n        }\r\n      }\r\n      const pokemonWeaknesses = [];\r\n      for (const typeName in weaknessCount) {\r\n        const increaseCount = this.dex.getImmunity(typeName, species) && this.dex.getEffectiveness(typeName, species) > 0;\r\n        if (!increaseCount)\r\n          continue;\r\n        if (weaknessCount[typeName] >= 2 * limitFactor) {\r\n          skip = true;\r\n          break;\r\n        }\r\n        pokemonWeaknesses.push(typeName);\r\n      }\r\n      if (skip) {\r\n        rejectedButNotInvalidPool.push(species.id);\r\n        continue;\r\n      }\r\n      if (!this.adjustLevel && this.getLevel(species) === 100 && numMaxLevelPokemon >= limitFactor) {\r\n        rejectedButNotInvalidPool.push(species.id);\r\n        continue;\r\n      }\r\n      pokemon.push(this.randomSet(species));\r\n      for (const typeName of species.types) {\r\n        if (typeCount[typeName]) {\r\n          typeCount[typeName]++;\r\n        } else {\r\n          typeCount[typeName] = 1;\r\n        }\r\n      }\r\n      for (const weakness of pokemonWeaknesses) {\r\n        weaknessCount[weakness]++;\r\n      }\r\n      if (this.getLevel(species) === 100)\r\n        numMaxLevelPokemon++;\r\n      if (species.id === \"ditto\")\r\n        this.battleHasDitto = true;\r\n    }\r\n    while (pokemon.length < this.maxTeamSize && rejectedButNotInvalidPool.length) {\r\n      const species = this.sampleNoReplace(rejectedButNotInvalidPool);\r\n      pokemon.push(this.randomSet(species));\r\n    }\r\n    if (pokemon.length < this.maxTeamSize && pokemon.length < 12 && !isMonotype) {\r\n      throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n    }\r\n    return pokemon;\r\n  }\r\n  /**\r\n   * Random set generation for Gen 1 Random Battles.\r\n   */\r\n  randomSet(species) {\r\n    species = this.dex.species.get(species);\r\n    if (!species.exists)\r\n      species = this.dex.species.get(\"pikachu\");\r\n    const data = this.randomData[species.id];\r\n    const movePool = data.moves?.slice() || [];\r\n    const moves = /* @__PURE__ */ new Set();\r\n    if (data.comboMoves && data.comboMoves.length <= this.maxMoveCount && this.randomChance(1, 2)) {\r\n      for (const m of data.comboMoves)\r\n        moves.add(m);\r\n    }\r\n    if (moves.size < this.maxMoveCount && data.exclusiveMoves) {\r\n      moves.add(this.sample(data.exclusiveMoves));\r\n    }\r\n    if (moves.size < this.maxMoveCount && data.essentialMoves) {\r\n      for (const moveid of data.essentialMoves) {\r\n        moves.add(moveid);\r\n        if (moves.size === this.maxMoveCount)\r\n          break;\r\n      }\r\n    }\r\n    while (moves.size < this.maxMoveCount && movePool.length) {\r\n      while (moves.size < this.maxMoveCount && movePool.length) {\r\n        const moveid = this.sampleNoReplace(movePool);\r\n        moves.add(moveid);\r\n      }\r\n    }\r\n    const level = this.getLevel(species);\r\n    const evs = { hp: 255, atk: 255, def: 255, spa: 255, spd: 255, spe: 255 };\r\n    const ivs = { hp: 30, atk: 30, def: 30, spa: 30, spd: 30, spe: 30 };\r\n    if (moves.has(\"substitute\")) {\r\n      while (evs.hp > 3) {\r\n        const hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n        if (hp % 4 !== 0)\r\n          break;\r\n        evs.hp -= 4;\r\n      }\r\n    }\r\n    const noAttackStatMoves = [...moves].every((m) => {\r\n      const move = this.dex.moves.get(m);\r\n      if (move.damageCallback || move.damage)\r\n        return true;\r\n      return move.category !== \"Physical\";\r\n    });\r\n    if (noAttackStatMoves && !moves.has(\"mimic\") && !moves.has(\"transform\")) {\r\n      evs.atk = 0;\r\n      ivs.atk = 2;\r\n    }\r\n    const shuffledMoves = Array.from(moves);\r\n    this.prng.shuffle(shuffledMoves);\r\n    return {\r\n      name: species.name,\r\n      species: species.name,\r\n      moves: shuffledMoves,\r\n      ability: \"No Ability\",\r\n      evs,\r\n      ivs,\r\n      item: \"\",\r\n      level,\r\n      shiny: false,\r\n      gender: false\r\n    };\r\n  }\r\n  randomHCTeam() {\r\n    this.enforceNoDirectCustomBanlistChanges();\r\n    const team = [];\r\n    const movePool = [...this.dex.moves.all()];\r\n    const typesPool = [\"Bird\", ...this.dex.types.names()];\r\n    const randomN = this.randomNPokemon(this.maxTeamSize);\r\n    const hackmonsCup = {};\r\n    for (const forme of randomN) {\r\n      const species = this.dex.species.get(forme);\r\n      if (!hackmonsCup[species.id]) {\r\n        hackmonsCup[species.id] = {\r\n          types: [this.sample(typesPool), this.sample(typesPool)],\r\n          baseStats: {\r\n            hp: import_lib.Utils.clampIntRange(this.random(256), 1),\r\n            atk: import_lib.Utils.clampIntRange(this.random(256), 1),\r\n            def: import_lib.Utils.clampIntRange(this.random(256), 1),\r\n            spa: import_lib.Utils.clampIntRange(this.random(256), 1),\r\n            spd: 0,\r\n            spe: import_lib.Utils.clampIntRange(this.random(256), 1)\r\n          }\r\n        };\r\n        if (this.forceMonotype && !hackmonsCup[species.id].types.includes(this.forceMonotype)) {\r\n          hackmonsCup[species.id].types[1] = this.forceMonotype;\r\n        }\r\n        hackmonsCup[species.id].baseStats.spd = hackmonsCup[species.id].baseStats.spa;\r\n      }\r\n      if (hackmonsCup[species.id].types[0] === hackmonsCup[species.id].types[1]) {\r\n        hackmonsCup[species.id].types.splice(1, 1);\r\n      }\r\n      const moves = [];\r\n      do {\r\n        const move = this.sampleNoReplace(movePool);\r\n        if (move.gen <= this.gen && !move.isNonstandard && !move.name.startsWith(\"Hidden Power \")) {\r\n          moves.push(move.id);\r\n        }\r\n      } while (moves.length < this.maxMoveCount);\r\n      const evs = {\r\n        hp: this.random(256),\r\n        atk: this.random(256),\r\n        def: this.random(256),\r\n        spa: this.random(256),\r\n        spd: 0,\r\n        spe: this.random(256)\r\n      };\r\n      evs[\"spd\"] = evs[\"spa\"];\r\n      const ivs = {\r\n        hp: 0,\r\n        atk: this.random(16),\r\n        def: this.random(16),\r\n        spa: this.random(16),\r\n        spd: 0,\r\n        spe: this.random(16)\r\n      };\r\n      ivs[\"hp\"] = ivs[\"atk\"] % 2 * 16 + ivs[\"def\"] % 2 * 8 + ivs[\"spe\"] % 2 * 4 + ivs[\"spa\"] % 2 * 2;\r\n      for (const iv in ivs) {\r\n        if (iv === \"hp\" || iv === \"spd\")\r\n          continue;\r\n        ivs[iv] *= 2;\r\n      }\r\n      ivs[\"spd\"] = ivs[\"spa\"];\r\n      const mbstmin = 425;\r\n      const baseStats = hackmonsCup[species.id].baseStats;\r\n      const calcStat = (statName, lvl) => {\r\n        if (lvl) {\r\n          return Math.floor(Math.floor(2 * baseStats[statName] + ivs[statName] + Math.floor(evs[statName] / 4)) * lvl / 100 + 5);\r\n        }\r\n        return Math.floor(2 * baseStats[statName] + ivs[statName] + Math.floor(evs[statName] / 4)) + 5;\r\n      };\r\n      let mbst = 0;\r\n      for (const statName of Object.keys(baseStats)) {\r\n        mbst += calcStat(statName);\r\n        if (statName === \"hp\")\r\n          mbst += 5;\r\n      }\r\n      let level;\r\n      if (this.adjustLevel) {\r\n        level = this.adjustLevel;\r\n      } else {\r\n        level = Math.floor(100 * mbstmin / mbst);\r\n        while (level < 100) {\r\n          for (const statName of Object.keys(baseStats)) {\r\n            mbst += calcStat(statName, level);\r\n            if (statName === \"hp\")\r\n              mbst += 5;\r\n          }\r\n          if (mbst >= mbstmin)\r\n            break;\r\n          level++;\r\n        }\r\n        if (level > 100)\r\n          level = 100;\r\n      }\r\n      team.push({\r\n        name: species.baseSpecies,\r\n        species: species.name,\r\n        gender: species.gender,\r\n        item: \"\",\r\n        ability: \"No Ability\",\r\n        moves,\r\n        evs,\r\n        ivs,\r\n        nature: \"\",\r\n        level,\r\n        shiny: false,\r\n        // Hacky but the only way to communicate stats/level generation properly\r\n        hc: hackmonsCup[species.id]\r\n      });\r\n    }\r\n    return team;\r\n  }\r\n}\r\nvar random_teams_default = RandomGen1Teams;\r\n//# sourceMappingURL=random-teams.js.map\r\n"],
  "mappings": "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",
  "names": []
}
